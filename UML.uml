@startuml

package app {
    class App {
        - scene : Scene
        - primaryStage : Stage
        + start(Stage) : void
        + showStartPage() : void
        + showLoginPage() : void
        + showAdminMainPage() : void
        + showServicePage() : void
        + showMedicineControlPage() : void
        + showPharmacyWorkersPage() : void
        + showOrdersPage() : void
        + main(String[]) : void
    }

    class StartPage {
        - root : BorderPane
        + StartPage()
        + getRoot() : BorderPane
    }

    class AdminPage {
        - loginRoot : BorderPane
        - mainRoot : BorderPane
        + AdminPage()
        + getLoginRoot() : BorderPane
        + getMainRoot() : BorderPane
    }

    class ServicePage {
        - root : BorderPane
        - table : TableView<Medicine>
        - displayedMedicines : ObservableList<Medicine>
        + ServicePage()
        + getRoot() : BorderPane
        + refresh() : void
        - configureTable() : void
        - searchMedicine(keyword : String) : void
        - showAllMedicines() : void
        - buySelectedMedicine() : void
        - showError(msg : String) : void
    }

    class MedicineControlPage {
        - root : BorderPane
        - medicineController : MedicineController
        + MedicineControlPage()
        + getRoot() : BorderPane
        + addMedicine(Medicine) : void
        + updateMedicine(Medicine) : void
        + deleteMedicine(int) : void
        + viewMedicine(int) : void
    }

    class PharmacyWorkersPage {
        - root : BorderPane
        + PharmacyWorkersPage()
        + getRoot() : BorderPane
    }

    class OrdersPage {
        - root : BorderPane
        + OrdersPage()
        + getRoot() : BorderPane
    }

    class AppUtils {
        + createLogo(width : double, alignment : String) : ImageView
    }
}

package controller {
    class MedicineController {
        - medicineDAO : MedicineDAO
        + MedicineController(medicineDAO : MedicineDAO)
        + addMedicine(medicine : Medicine) : boolean
        + updateMedicine(medicine : Medicine) : boolean
        + deleteMedicine(medicineId : int) : boolean
        + getMedicine(medicineId : int) : Medicine
        + listAllMedicines() : List<Medicine>
    }
}

package dao {
    class MedicineDAO {
        - medicines : List<Medicine>
        - nextId : int
        + MedicineDAO()
        + addMedicine(medicine : Medicine) : boolean
        + updateMedicine(medicine : Medicine) : boolean
        + deleteMedicine(medicineId : int) : boolean
        + getMedicine(medicineId : int) : Medicine
        + listAllMedicines() : List<Medicine>
    }
}

package model {
    abstract class Person {
        - id : int
        - name : String
        - email : String
        - phoneNumber : String
        + Person(int, String, String, String)
        + getId() : int
        + getName() : String
        + getEmail() : String
        + getPhoneNumber() : String
        + getDetails() : String
    }

    class Customer {
        - orderHistory : List<Order>
        + Customer(int, String, String, String)
        + placeOrder(order : Order) : void
        + getOrderHistory() : List<Order>
    }

    class PharmacyWorker {
        - role : String
        + PharmacyWorker(int, String, String, String, String)
        + manageInventory() : void
        + assistCustomer(customer : Customer) : void
    }

    class Order {
        - id : int
        - customer : Customer
        - medicines : List<Medicine>
        - orderDate : Date
        + Order(int, Customer, List<Medicine>, Date)
        + calculateTotal() : double
        + getOrderDetails() : String
    }

    interface Medicine {
        + getId() : int
        + getName() : String
        + getPrice() : double
        + getExpirationDate() : Date
        + getStockQuantity() : int
        + setId(id : int) : void
        + updateQuantity(quantity : int) : void
        + getDetails() : String
        + isExpired() : boolean
    }

    class MedicineLiquid {
        - id : int
        - name : String
        - price : double
        - expirationDate : Date
        - stockQuantity : int
        - volume : int
        + MedicineLiquid(int, String, double, Date, int, int)
        + getId() : int
        + getName() : String
        + getPrice() : double
        + getExpirationDate() : Date
        + getStockQuantity() : int
        + getVolume() : int
        + setId(int) : void
        + updateQuantity(int) : void
        + getDetails() : String
        + isExpired() : boolean
    }

    class MedicinePills {
        - id : int
        - name : String
        - price : double
        - expirationDate : Date
        - stockQuantity : int
        - pillCount : int
        + MedicinePills(int, String, double, Date, int, int)
        + getId() : int
        + getName() : String
        + getPrice() : double
        + getExpirationDate() : Date
        + getStockQuantity() : int
        + gettPillCount() : int
        + setId(int) : void
        + updateQuantity(int) : void
        + getDetails() : String
        + isExpired() : boolean
    }

    Person <|-- Customer
    Person <|-- PharmacyWorker
    Customer "1" o-- "*" Order
    Order "1" *-- "1" Customer
    Order "1" *-- "*" Medicine
    MedicineLiquid ..|> Medicine
    MedicinePills ..|> Medicine
}

' Relationships
App --> StartPage
App --> AdminPage
App --> ServicePage
App --> MedicineControlPage
App --> PharmacyWorkersPage
App --> OrdersPage

StartPage ..> AppUtils
AdminPage ..> AppUtils
ServicePage ..> AppUtils
MedicineControlPage ..> AppUtils

MedicineControlPage --> controller.MedicineController
controller.MedicineController --> dao.MedicineDAO
controller.MedicineController --> model.Medicine
dao.MedicineDAO --> model.Medicine

@enduml